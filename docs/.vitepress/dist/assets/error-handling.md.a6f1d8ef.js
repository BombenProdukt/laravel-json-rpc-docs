import{_ as e,o as s,c as a,V as n}from"./chunks/framework.d3b95951.js";const D=JSON.parse('{"title":"Error Handling","description":"","frontmatter":{},"headers":[],"relativePath":"error-handling.md","filePath":"error-handling.md"}'),o={name:"error-handling.md"},r=n(`<h1 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h1><p>Laravel provides several different approaches to handle errors in your application. We expose various exceptions as JSON-RPC errors. However, you may want to handle errors in your own way. In this chapter, we will discuss how to handle errors in your JSON-RPC API.</p><h2 id="error-handling-1" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling-1" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><p>If you want to handle errors in your JSON-RPC API, you should use a middleware and apply it to your server. We recommend to use an error handling middleware that is already available in Laravel. For example, you may use <a href="https://laravel.com/docs/10.x/errors#reporting-errors" target="_blank" rel="noreferrer">reporting errors</a> or <a href="https://laravel.com/docs/10.x/errors#rendering-errors" target="_blank" rel="noreferrer">rendering errors</a>.</p><h3 id="creating-exceptions" tabindex="-1">Creating Exceptions <a class="header-anchor" href="#creating-exceptions" aria-label="Permalink to &quot;Creating Exceptions&quot;">​</a></h3><p>If you want to create your own exceptions, you should extend the <code>BombenProdukt\\JsonRpc\\Exception\\AbstractRequestException</code> class. The class provides a constructor that accepts the following arguments:</p><ul><li><code>int $errorCode</code> - The error code of the exception.</li><li><code>string $errorMessage</code> - The error message of the exception.</li><li><code>mixed $errorData</code> - The error data of the exception.</li></ul><p>Any exceptions that are not an instance of <code>AbstractRequestException</code> will be converted to an internal server error. The internal server error will have the error code <code>-32603</code> and the error message <code>Internal error</code>. Exceptions that are an instance of <code>AbstractRequestException</code> will be converted to a JSON-RPC error response.</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#A6ACCD;">php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">declare</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">strict_types</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BombenProdukt</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">JsonRpc</span><span style="color:#89DDFF;">\\</span><span style="color:#FFCB6B;">Exception</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodNotFoundException</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AbstractRequestException</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">mixed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">parent</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">__construct</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">errorCode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">32601</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">errorMessage</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Method not found</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">errorData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="reserved-error-codes" tabindex="-1">Reserved Error Codes <a class="header-anchor" href="#reserved-error-codes" aria-label="Permalink to &quot;Reserved Error Codes&quot;">​</a></h2><p>The JSON-RPC specification reserves the following error codes:</p><ul><li><code>-32700</code> - Parse error (Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.)</li><li><code>-32600</code> - Invalid Request (The JSON sent is not a valid Request object.)</li><li><code>-32601</code> - Method not found (The method does not exist / is not available.)</li><li><code>-32602</code> - Invalid params (Invalid method parameter(s).)</li><li><code>-32603</code> - Internal error (Internal JSON-RPC error.)</li><li><code>-32000</code> to <code>-32099</code> - Server error (Reserved for implementation-defined server-errors.)</li></ul><p>The remainder of the space is available for application defined errors.</p>`,14),l=[r];function t(p,c,i,d,y,h){return s(),a("div",null,l)}const F=e(o,[["render",t]]);export{D as __pageData,F as default};
